External BoxESP v5.1 by sph4ck & dheir
----------------------------------------
Design notes and technical insight

Design goals:
- undetectable from VAC
	+ no injection, no memory or code modification of the game
	+ only ReadProcessMemory from an outside process
	+ interaction using only virtual key-strokes and virtual mouse moves
	+ display using a transparent overlay window
- still look like a legit player if you want to play this way (killcams...)
- customizable
- open-source (many people already contributed, thanks a lot!!!)
- fun to code and fun to customize

Deliberate left-overs:
- does not work on XP or without Aero mode (Vista/Win7)
- does not know whether a player is visible or not
- no chams nor texture hacks (warezdude92 provides excellent texture hacks)
- no donate button - if you want to donate please give to the Red Cross and let me know
- no GUI, but a comprehensive config file

= OVERLAY DISPLAY
=================
It uses a technique from Tristan Ward (http://www.codeproject.com/KB/directx/umvistad3d.aspx).
Basically is uses DirectX to quickly draw an offscreen picture in 32 bits colors (AARRGGBB - AA is alpha or transparency - RR red - GG green - BB blue) then render it as a transparent window over the desktop.

Quote: "The DWM is the application that provides the hardware accelerated windowing system in Vista. To be short and sweet, the DWM is a full screen Direct3D app that creates a textured quad for every "window", arranges these quads in 3D space, and renders them to the screen along with some sexy pixel shader effects (Aero Glass). The standard desktop view appears to be good old 2D but a quick hit of the WinKey+TAB will demonstrate that this is definitely not the case."

It uses Windows DWM (http://en.wikipedia.org/wiki/Desktop_Window_Manager) hence requires Aero mode and does not work on XP.

= PROGRAM STRUCTURE
===================

The entry point is "launcher.py". It is kept intentionnally as small as possible since the byte-compiled version (launcher.pyc) is included in the stand-alone EXE. Including too much code in the EXE could lead to an easy ban.
So the EXE contains absolutely no hack-related features. All the real code is in "library.dll" in byte-compiled format.

The "main.py" registers all modules, inits them, and contains the Windows Event loop.

You need only a standard ActiveState Python distrib. The additionnal required modules are included in the "src" folder: comtypes, psyco & directx. You don't need to install those modules. You need only to install "py2exe" if you want to generate the stand-alone EXE. (http://www.py2exe.org/)

On exit, it tries to release all DirectX resources. It seems that DirectX leaks a lot, and after several launches of COD or Hack, performance degrades and game becomes laggy. It so try a fresh reboot.

The following are utilities classes:

* Config.py: contains all configurations parameters. This file contains default parameters. It also loads the "config" file if present to override default parameters. The "config" file is supposed to be provided with the standalone EXE as a separate file. Be careful as "config" is interpreted as Python code: you can easily do nasty things...

* setup.py: the script to use to generate the standalone version. This uses the py2exe module.

* util.py: contains basic drawing features using DirectX, and the interface to SendInput (not present in pywin32)

* Keys.py: first parses the config file to extract all parameters starting with "KEY_". This gives us the list of all keys to scan. At each iteration, reads all the keys status and publish them in the keys[] hash. Special treatment for F1-F12 working in on/off toggles (to catch real status of F1-F12 use VK_F1).

* stealth.py: this module only creates random data structures and pieces of code to avoid any anti-cheat program to look at fixed memory location to detec this hack.

Note: on some antivirus software like Kaspersky, the key scanning is alerted as a potential key logger. This is obviously a false positive. If you are a real paranoid, you can check that this program has network communication at all.

* structs.py: contains COD6-specific memory structures. A special high-level "Player()" structure is defined to ease module development. See below.

* ReadGame.py: this is where all the game scanning occurs. This class provides many attributes about COD6: window position, internal structures... This is also where the ReadProcessMemory() occurs. This class is used by all modules.

* Frame.py: this holds the DirectX overlay frame. This class is used by all modules that need to draw something on the screen.

* Textures.py: loads all maps as tectures and calculate the transformation matrix between games coordinates and map pixels

* Sprites.py: loads all sprites displayed in ESP (claymore, grenades...)

* WeaponNames.py: loads all weapon names and weapon models

- GAME HACK MODULES
===================
All other module provide basic hack features and follow the same pattern.
  - __init__(self, env): the 'env' parameter refers to the Main class, where you can access other modules like self.env.read_game or self.enf.frame.
  - init(self): do all the game initialisation
  - render(self): called at each iteration. You might want to check 'self.env.read_game.is_in_game' for features that are to be used only in-game.

List of feature-modules:

* Autostab.py: triggers a melee attack 'E' key when an enemy is in range.
* Bot.py: provides all aimbot features: rifle, tubebot and knifebot. This is where the white spot is being drawn on the selected target and the target is being locked.
* Crosshair.py: draws a crosshair in the middle of the screen. The simplest module you can imagine.
* Esp.py: draws the Box ESP on the screen
* Inspector.py: for debug only
* Radar.py: draws the mini-radar
* BigRadar.py: draws a non-rotating big radar with players
* Rage.py: selects an enemy player with a specific color, so you can rage him again and again (another hacker?)
* Status.py: draw the status bar at the bottom of the window

- PLAYER HIGH-LEVEL STRUCTURE
=============================

To simplify module development, a high level Player() structure was introduced to share some common piece of code. All data from "Entity" or "ClientInfo" is in one place.

Data provided is:
  - valid = entity.valid
  - pos = entity.pos, position in space (x,y,z)
  - pitch, yaw, roll= same as in entity
  - client_num = entity.clientNum
  - type = entity.type
  - pose = entity.PlayerPose
  - shooting = entity.shooting
  - zoomed = entity.zoomed
  - weapon_num = entity.WeaponNum
  - alive = entity.alive (check with 'alive & 0x01' if you want the real alive, and not killcams)
  
  - enemy = True if player is not in your team
  - name = clientInfo.name
  - team = clientInfo.name
  - perk = clientInfo.perk

  - color_esp = the default color in box esp (computed from config file)
  - color_map = the default color in mini-radar (computed from config file)
